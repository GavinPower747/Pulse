@using Pulse.WebApp.Features.Posts.Components
@using Pulse.WebApp.Features.Posts.Models
@using Pulse.WebApp.Features.Posts.Mapping
@using Pulse.Posts.Contracts
@using Pulse.Timeline.Contracts
@using Pulse.Users.Contracts
@using Pulse.WebApp.Auth

@inject ITimelineService TimelineService
@inject IPostQueryService PostQueryService
@inject IUserQueries UserQueries
@inject PostMapper Mapper
@inject IHttpContextAccessor HttpContextAccessor

@code {
    private IEnumerable<PostViewModel> FirstPage { get; set; } = new List<PostViewModel>();

    protected override async Task OnInitializedAsync()
    {
        var userId = HttpContextAccessor.HttpContext?.GetUserId();

        if (!userId.HasValue)
        {
            return;
        }

        var timeline = await TimelineService.GetTimelinePage(userId.Value, string.Empty, 10);
        var posts = await PostQueryService.Get(timeline, CancellationToken.None);

        foreach (var post in posts)
        {
            var user = await UserQueries.GetUser(post.UserId);
            var vm = Mapper.MapToViewModel(post, user);

            FirstPage = FirstPage.Append(vm);
        }
    }
}

<div id="user-feed" class="[&_p:last-child]:text-slate-500 [&_p:first-child]:text-lg divide-y divide-slate-200">
    @if (FirstPage.Any())
    {
        <FeedPage EagerPosts="@FirstPage.ToList()" />
    }
    else
    {
        <div class="text-center text-slate-500 text-lg p-8">
            <p>Nothing to see here.</p>
        </div>
    }
</div>