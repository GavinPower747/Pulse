@page "/u/{username}"
@using Pulse.Users.Contracts
@using Pulse.Posts.Contracts
@using Pulse.Shared.Auth
@using Pulse.Shared.UI.Components
@using Pulse.Followers.Contracts.Services
@using Pulse.Followers.UI.Components
@using Pulse.Posts.UI.Models
@using Pulse.Posts.UI.Mapping
@using Pulse.Posts.UI.Components
@using Pulse.WebApp.Features.Users.Components

@inject IUserQueries UserQueries
@inject IFollowerProvider FollowerProvider
@inject IPostQueryService PostQueries
@inject IdentityProvider IdentityProvider
@inject PostMapper PostMapper

@code {
    [Parameter] public required string Username { get; set; }

    private CurrentUser currentUser => IdentityProvider.GetCurrentUser();
    private User? user;
    private bool isFollowing;
    private bool isViewingOwnProfile => Username == currentUser.UserName;
    private bool showCTA => !isViewingOwnProfile;
    private List<PostViewModel> firstPage = new List<PostViewModel>();
    private int followerCount;
    private int followingCount;
    private string continuationToken = string.Empty;
    private string continuationUrl => !string.IsNullOrWhiteSpace(continuationToken) 
        ? $"/api/user/{user?.Id}/posts?continuationToken={continuationToken}"
        : string.Empty;

    protected override async Task OnInitializedAsync()
    {
        // If we're viewing our own profile, save on the remote call and use the token.
        if(!isViewingOwnProfile)
        {
            user = await UserQueries.GetUser(Username);
        }
        else
        {
            user = new User(currentUser.Id, currentUser.UserName, string.Empty, currentUser.DisplayName);
        }

        var (posts, continuationToken) = await PostQueries.GetForUser(user.Id, 50, null, CancellationToken.None);

        if(!isViewingOwnProfile)       
            isFollowing = await FollowerProvider.IsFollowing(currentUser.Id, user.Id, CancellationToken.None);

        firstPage = posts.Select(x => PostMapper.MapToViewModel(x, user)).ToList();

        followerCount = await FollowerProvider.GetFollowerCount(user.Id, CancellationToken.None);
        followingCount = await FollowerProvider.GetFollowingCount(user.Id, CancellationToken.None);
    }
}

<div
    id="user-profile"
    x-data="{ userCardInView: true }"
    x-init="() => {
          const observer = new IntersectionObserver(
              ([entry]) => { userCardInView = entry.isIntersecting; },
              { threshold: 0.1 }
          );
          observer.observe($refs.userCard);
      }">
    <Header Title="@user?.DisplayName" ShowBackButton="true">
        @if(showCTA)
        {
        <div class="w-full">
            <div class="float-end"
                x-show="!userCardInView" 
                x-transition:enter="transition ease-out duration-300" 
                x-transition:enter-start="opacity-0" 
                x-transition:enter-end="opacity-100" 
                x-transition:leave="transition ease-in duration-300" 
                x-transition:leave-start="opacity-100" 
                x-transition:leave-end="opacity-0">
                    <FollowButton UserId="@user?.Id" IsFollowing="@isFollowing"/>
            </div>
        </div>
        }
    </Header>
    <Panel>
        <UserCard x-ref="userCard" UserId="@user?.Id" Name="@user?.DisplayName" Username="@Username" IsFollowing="@isFollowing" ShowCTA="@showCTA" Description="This is a sub heading" Followers="@followerCount" Following="@followingCount" ProfilePictureUrl="@string.Empty"/>
    </Panel>
    <div id="user-feed" class="[&_p:last-child]:text-slate-500 [&_p:first-child]:text-lg">
        <InfinitelyScrollingFeedPage 
            EagerItems="@firstPage" 
            ContinuationUrl="@continuationUrl" 
            FeedElementSelector="#user-feed"
            Context="post">

            <ItemTemplate>
                <Post CurrentPost="@post"/>
            </ItemTemplate>
        </InfinitelyScrollingFeedPage>
    </div>
    <Modal data-js-open-event="pulse:attachment-clicked">
        <AttachmentModal />
    </Modal>
</div>