@using Pulse.Shared.Auth
@using Pulse.Shared.UI.Components
@using Microsoft.AspNetCore.Antiforgery
@using Microsoft.AspNetCore.Components.Forms
@attribute [RequireAntiforgeryToken]

@inject IdentityProvider IdentityProvider

@code {
    [Parameter] public string? ErrorMessage { get; set; }

    private CurrentUser? _user;

    protected override void OnInitialized()
    {
        _user = IdentityProvider.GetCurrentUser();
    }
}

<Panel>
    <form class="flex flex-col flex-1 gap-y-4" hx-post="/api/post" hx-swap="outerHTML" hx-trigger="submit" x-data="{ 
            text: '', 
            postLength: 0, 
            maxPostLength: 280, 
            startColour: [255, 255, 255],
            midColour: [255, 255, 0],
            endColour: [255, 0, 0],
            getCurrentColourValue: getCurrentColourValue
        }">
        <script>
            function getCurrentColourValue(startColour, midColour, endColour, progress) {
                if (progress <= 0) return `rgb(${startColour.join(', ')})`;
                if (progress >= 1) return `rgb(${endColour.join(', ')})`;

                let adjustedProgress = progress <= 0.5 ? progress * 2 : (progress - 0.5) * 2;
                let fromColour = progress <= 0.5 ? startColour : midColour;
                let toColour = progress <= 0.5 ? midColour : endColour;

                let interpolatedRGB = fromColour.map((channel, index) => {
                    return exponentialInterpolation(channel, toColour[index], adjustedProgress);
                });

                return `rgb(${interpolatedRGB.join(', ')})`;
            }

            function exponentialInterpolation(startValue, endValue, progress) {
                const valueRange = endValue - startValue;

                const exponentialFactor = Math.pow(2, 10 * (progress - 1));
                const interpolatedValue = startValue + valueRange * exponentialFactor;

                return clamp(interpolatedValue, 0, 255);
            }

            function clamp(value, min, max) {
                return Math.min(Math.max(value, min), max);
            }
        </script>
        <AntiforgeryToken />
        <div class="flex flex-1 p-4 space-x-5">
            <Avatar src="@_user?.ProfilePictureUrl" alt="@_user?.DisplayName" initials="@_user?.Initials" />
            <textarea x-model="text"
                x-on:input="$el.style.height = 'auto'; $el.style.height = ($el.scrollHeight) + 'px';" required
                maxlength="280" rows="2" name="content" type="text" placeholder="What's up?"
                class="block overflow-hidden mx-4 p-2.5 w-full text-sm text-gray-900 bg-white rounded-xl border border-gray-300 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-800 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500 resize-none" />
        </div>
        <div class="flex justify-end items-center">
            <div class="inline-flex justify-center items-center">
                @if (!string.IsNullOrWhiteSpace(ErrorMessage))
                {
                <div class="mr-4">
                    <p class="text-red-500 text-sm">@ErrorMessage</p>
                </div>
                }
                <div class="mr-4">
                    <svg class="w-6 h-6" viewBox="0 0 36 36">
                        <path stroke="#080E24" stroke-width="4" fill="none" d="M18 2.0845
                                a 15.9155 15.9155 0 0 1 0 31.831
                                a 15.9155 15.9155 0 0 1 0 -31.831" />
                        <path x-show="text.length <= maxPostLength && text.length > 0"
                            :style="'stroke-dasharray: ' + ((text.length / maxPostLength) * 100) + ' 100; stroke: ' + getCurrentColourValue(startColour, midColour, endColour, text.length / maxPostLength)"
                            stroke-width="4" fill="none" stroke-dasharray="0 100" d="M18 2.0845
                                a 15.9155 15.9155 0 0 1 0 31.831
                                a 15.9155 15.9155 0 0 1 0 -31.831" />
                    </svg>
                </div>
                <button type="submit"
                    class="m-2 items-center font-bold rounded-full border px-4 py-2 text-sm bg-white text-black border-transparent disabled:opacity-50 transition-opacity duration-200">
                    Post
                </button>
            </div>
        </div>
    </form>
</Panel>