@using Pulse.Followers.Contracts.Services
@using Pulse.Shared.Auth

@inject IFollowerProvider FollowerProvider
@inject IdentityProvider IdentityService

@code {
    [Parameter] public bool IsFollowing { get; set; } = false;
    [Parameter] public Guid? UserId { get; set; } = Guid.Empty;

    private string RequestUrl => $"/api/user/{UserId}/followers";

    protected async override Task OnInitializedAsync()
    {
        var currentUser = IdentityService.GetCurrentUser();
        IsFollowing = await FollowerProvider.IsFollowing(currentUser!.Id, UserId.GetValueOrDefault(), CancellationToken.None);
    }
}

<div>
    @if(IsFollowing)
    {
        <button
            hx-swap="outerHTML"
            hx-trigger="click"
            hx-boost="true"
            class="inline-flex items-center font-bold rounded-full border px-4 py-2 text-sm border-transparent bg-slate-900 text-white disabled:opacity-50 transition-opacity duration-200"
            hx-delete="/api/user/@UserId/followers"
            >
            Unfollow
        </button>
    }
    else
    {
        <button
            hx-swap="outerHTML"
            hx-trigger="click"
            hx-boost="true"
            class="inline-flex items-center font-bold rounded-full border px-4 py-2 text-sm border-transparent bg-white text-slate-900 disabled:opacity-50 transition-opacity duration-200"
            hx-post="/api/user/@UserId/followers"
            >
            Follow
        </button>
    }
</div>